<?xml version="1.0" encoding="utf-8"?>
<post>
  <id>a4d938a5-7adc-4269-8eec-55d5c2a222e5</id>
  <title>Using Data Generation Plans to create repeatable data for code unit tests</title>
  <slug>using-data-generation-plans-to-create-repeatable-data-for-code-unit-tests</slug>
  <shortUrl>http://bit.ly/1kjevG9</shortUrl>
  <author>Colin Dembovsky</author>
  <pubDate>2011-02-12 19:25:00</pubDate>
  <lastModified>2020-04-06 09:15:36</lastModified>
  <content>&lt;p&gt;The Database Professional tools in VS 2010 allow you to create a project that encapsulates the schema of a SQL database. You can also use this project to create unit tests for stored procs or functions – and create test data for these database unit tests.&lt;/p&gt; &lt;p&gt;However, what if just want repeatable data for normal code unit tests as part of a TeamBuild? I was recently at a client where this scenario came up. I tried to get the data generation plan to run in the [AssemblyInitialize] method of the unit test project, but just got the error “Could not deploy database” or “Could not run data generation plan” – not very helpful.&lt;/p&gt; &lt;p&gt;So we figured out a workaround – essentially we use MSBuild to run the data generation plan in the solution just before unit testing.&lt;/p&gt; &lt;p&gt;Here are the high-level steps you need to follow:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a DBPro project with a data generation plan&lt;/li&gt; &lt;li&gt;Create an MSBuild project file that can run the data generation plan&lt;/li&gt; &lt;li&gt;Customize your build template&lt;/li&gt; &lt;li&gt;Add 2 arguments – RunDataGeneration and PathToMSBuildProjFile&lt;/li&gt; &lt;li&gt;Add a couple of build activities to invoke MSBuild to run the data generation plan&lt;/li&gt;&lt;/ul&gt; &lt;h2&gt;The MSBuild Project File&lt;/h2&gt;Once you’ve created the database project (I won’t cover it in this post, but there are plenty of blogs and articles on the web about how to do this), create a data generation plan for your test data. Now create a new xml file in the root of your database project – the one I created is called datagen.proj. Here’s the file contents:&lt;br&gt;&lt;pre class="code"&gt;&lt;span style="color: blue"&gt;&lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Project &lt;/span&gt;&lt;span style="color: red"&gt;DefaultTargets&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;DataGen&lt;/span&gt;" &lt;span style="color: red"&gt;xmlns&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;&lt;a href="http://schemas.microsoft.com/developer/msbuild/2003"&gt;"&gt;http://schemas.microsoft.com/developer/msbuild/2003&lt;/span&gt;"&lt;span style="color: blue"&gt;&gt;&lt;br /&gt;&lt;/a&gt;&lt;br&gt;&lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Import &lt;/span&gt;&lt;span style="color: red"&gt;Project&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v10.0\TeamData\Microsoft.Data.Schema.Common.targets&lt;/span&gt;" &lt;span style="color: blue"&gt;/&gt;  &lt;br /&gt;&lt;br&gt;&lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;Target &lt;/span&gt;&lt;span style="color: red"&gt;Name&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;DataGen&lt;/span&gt;"&lt;span style="color: blue"&gt;&gt;&lt;br /&gt;&lt;br&gt;&lt;&lt;/span&gt;&lt;span style="color: #a31515"&gt;DataGeneratorTask&lt;br /&gt;&lt;br&gt;&lt;/span&gt;&lt;span style="color: red"&gt;ConnectionString&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;Data Source=dataserver;Initial Catalog=AutomatedTesting;Integrated Security=True;Pooling=False&lt;/span&gt;"&lt;br /&gt;&lt;br&gt;&lt;span style="color: red"&gt;SourceFile&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;.\Data Generation Plans\UnitTestPlan.dgen&lt;/span&gt;"&lt;br /&gt;&lt;br&gt;&lt;span style="color: red"&gt;PurgeTablesBeforePopulate&lt;/span&gt;&lt;span style="color: blue"&gt;=&lt;/span&gt;"&lt;span style="color: blue"&gt;True&lt;/span&gt;"&lt;span style="color: blue"&gt;/&gt;&lt;br /&gt;&lt;br&gt;&lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Target&lt;/span&gt;&lt;span style="color: blue"&gt;&gt;&lt;br /&gt;&lt;br&gt;&lt;/&lt;/span&gt;&lt;span style="color: #a31515"&gt;Project&lt;/span&gt;&lt;span style="color: blue"&gt;&gt;&lt;/span&gt;&lt;/pre&gt;Of course, you’ll need to change the connection string appropriately and set the “PurgeTablesBeforePopulate” to false if you don’t want to blow away the existing data – though since the data generation is creating test data, you should blow away existing data anyway. Set the sourcefile to the dgen file – the path is relative to the root of the database project.&lt;br&gt;&lt;br&gt;You can test the project file by opening a VS command console, navigating to the folder containing the proj file and typing “msbuild datagen.proj”. Make sure this step succeeds before you continue.&lt;br&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;Customizing the Build Workflow&lt;/h2&gt;I added two arguments to the workflow – a Boolean called “RunDataGeneration” and a string called DataGenMSBuildProjSourcePath. I also added metadata to “prettify” the arguments when builds are created.&lt;br&gt;&lt;br&gt;Now it’s time to customize the build workflow to create the test data before unit testing. I used the DefaultTemplate.xaml and navigated into the “Try, Compile and Test” sequence – then went deeper and found the “If Not TestSpecs = Emtpy” activity. A little further, just before the tasks that actually run the tests, I inserted an “If” activity (setting the condition to “RunDataGeneration = True”). The “else” branch is empty and I show the “Then” branch below:&lt;br&gt;&lt;br&gt;&lt;a href="http://lh6.ggpht.com/_d41Ixos7YsM/TVbCk090_4I/AAAAAAAAAOY/og8wjpkQzuc/s1600-h/screen%5B4%5D.jpg"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="screen" border="0" alt="screen" src="http://lh6.ggpht.com/_d41Ixos7YsM/TVbCmk_pTTI/AAAAAAAAAOc/UXQvfo8knHg/screen_thumb%5B6%5D.jpg?imgmax=800" width="502" height="351"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;There are just two activities – a ConvertWorkSpace and an MSBuild activity. The ConvertWorkspace task is set to ServerToLocal and converts the DataGenMSBuildProjSourcePath to a local path (set the workspace parameter to “Workspace”). You’ll need to create a local variable scoped to the sequence called “localProjectPath” for the out parameter.&lt;br&gt;&lt;br&gt;Next, set the MSBuild task’s project to localProjectPath. The only other thing that needs mentioning here is that you MUST set the ToolPlatform of the MSBuild activity to X86 – the data generation seems to only work if called from the x86 msbuild and not from the x64 one.&lt;br&gt;&lt;br&gt;Check in your template and create the build – make sure you set “RunDataGeneration” to true and set the DataGenMSBuildProjSourcePath to the full source control path to the proj file (starting with $/…).&lt;br&gt;&lt;br&gt;Happy testing!&lt;br /&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>teambuild</category>
  </categories>
  <comments></comments>
  <viewCount>1136</viewCount>
</post>