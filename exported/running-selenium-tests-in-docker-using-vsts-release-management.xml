<?xml version="1.0" encoding="utf-8"?>
<post>
  <id>034cf4fd-cdd5-4a23-8759-3b17e3807a7a</id>
  <title>Running Selenium Tests in Docker using VSTS Release Management</title>
  <slug>running-selenium-tests-in-docker-using-vsts-release-management</slug>
  <shortUrl>http://bit.ly/2lIbzLN</shortUrl>
  <author></author>
  <pubDate>2017-03-09 16:43:25</pubDate>
  <lastModified>2019-05-20 07:28:39</lastModified>
  <content>&lt;p&gt;The other day I was doing a POC to run some Selenium tests in a Release. I came across some Selenium docker images that I thought would be perfect – you can spin up a Selenium grid (or hub) container and then join as many node containers as you want to (the node container is where the tests will actually run). The really cool thing about the node containers is that the container is configured with a browser (there are images for Chrome and Firefox) meaning you don’t have to install and configure a browser or manually run Selenium to join the grid. Just fire up a couple containers and you’re ready to test!&lt;/p&gt; &lt;p&gt;The source code for this post is on &lt;a href="https://github.com/colindembovsky/vsts-selenium-docker-tests" target="_blank"&gt;Github&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here’s a diagram of the components:&lt;/p&gt; &lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/25d0d00c-4ccc-4026-900b-f50755bb9b6c.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/3d91a7fa-2c3e-4cdb-aa9c-54d9b6491fbd.png" width="745" height="282"&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;The Tests&lt;/h2&gt; &lt;p&gt;To code the tests, I use Selenium WebDriver. When it comes to instantiating a driver instance, I use the RemoteWebDriver class and pass in the Selenium Grid hub URL as well as the capabilities that I need for the test (including which browser to use) – see line 3:&lt;/p&gt;&lt;pre class="brush: csharp; highlight: [3];"&gt;private void Test(ICapabilities capabilities)
{
    var driver = new RemoteWebDriver(new Uri(HubUrl), capabilities);
    driver.Navigate().GoToUrl(BaseUrl);
    // other test steps here
}

[TestMethod]
public void HomePage()
{
    Test(DesiredCapabilities.Chrome());
    Test(DesiredCapabilities.Firefox());
}
&lt;/pre&gt;
&lt;p&gt;Line 4 includes a setting that is specific to the test – in this case the first page to navigate to.&lt;/p&gt;
&lt;p&gt;When running this test, we need to be able to pass the environment specific values for the HubUrl and BaseUrl into the invocation. That’s where we can use a runsettings file.&lt;/p&gt;
&lt;h3&gt;Test RunSettings&lt;/h3&gt;
&lt;p&gt;The runsettings file for this example is simple – it’s just XML and we’re just using the TestRunParameters element to set the properties:&lt;/p&gt;&lt;pre class="brush: xml;"&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;RunSettings&amp;gt;
    &amp;lt;TestRunParameters&amp;gt;
        &amp;lt;Parameter name="BaseUrl" value="http://bing.com" /&amp;gt;
        &amp;lt;Parameter name="HubUrl" value="http://localhost:4444/wd/hub" /&amp;gt;
    &amp;lt;/TestRunParameters&amp;gt;
&amp;lt;/RunSettings&amp;gt;
&lt;/pre&gt;
&lt;p&gt;You can of course add other settings to the runsettings file for the other environment specific values you need to run your tests. To test the setting in VS, make sure to go to Test-&amp;gt;Test Settings-&amp;gt;Select Test Settings File and browse to your runsettings file.&lt;/p&gt;
&lt;h2&gt;The Build&lt;/h2&gt;
&lt;p&gt;The build is really simple – in my case I just build the test project. Of course in the real world you’ll be building your application as well as the test assemblies. The key here is to ensure that you upload the test assemblies as well as the runsettings file to the drop (more on what’s in the runsettings file later). The runsettings file can be uploaded using two methods: either copy it using a Copy Files task into the artifact staging directory – or you can mark the file’s properties in the solution to “Copy Always” to ensure it’s copied to the bin folder when you compile. I’ve selected the latter option.&lt;/p&gt;
&lt;p&gt;Here’s what the properties for the file look like in VS:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/637a3469-5954-4028-a336-2af270dd3d08.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/21e1beba-4284-457a-8a7b-ab3e696965d9.png" width="351" height="222"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s the build definition:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/c75aac1c-c4d9-4e97-8843-bbba84245a84.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/1bc5d71f-aa64-44ea-baa2-8782da1090d2.png" width="773" height="340"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Docker Host&lt;/h2&gt;
&lt;p&gt;If you don’t have a docker host, the fastest way to get one is to spin it up in Azure using the Azure CLI – especially since that will create the certificates to secure the docker connection for you! If you’ve got a docker host already, you can skip this section – but you will need to know where the certs are for your host for later steps.&lt;/p&gt;
&lt;p&gt;Here are the steps you need to take to do that (I did this all in my Windows Bash terminal):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install node and npm 
&lt;li&gt;Install the azure-cli using “&lt;font face="Courier New"&gt;npm install –g azure-cli&lt;/font&gt;” 
&lt;li&gt;Run “&lt;font face="Courier New"&gt;azure login&lt;/font&gt;” and log in to your Azure account 
&lt;li&gt;Don’t forget to set your subscription if you have more than one 
&lt;li&gt;Create an Azure Resource Group using “&lt;font face="Courier New"&gt;azure group create &amp;lt;name&amp;gt; &amp;lt;location&amp;gt;&lt;/font&gt;” 
&lt;li&gt;Run “&lt;font face="Courier New"&gt;azure vm image list –l westus –p Canonical&lt;/font&gt;” to get a list of the Ubuntu images. Select the Urn of the image you want to base the VM on and store it – it will be something like “&lt;font face="Courier New"&gt;Canonical:UbuntuServer:16.04-LTS:16.04.201702240&lt;/font&gt;”. I’ve saved the value into &lt;font face="Courier New"&gt;$urn&lt;/font&gt; for the next command. 
&lt;li&gt;Run the azure vm docker create command – something like this: 
&lt;ol&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;azure vm docker create --data-disk-size 22 --vm-size "Standard_d1_v2" --image-urn $urn --admin-username vsts --admin-password $password --nic-name "cd-dockerhost-nic" --vnet-address-prefix "10.2.0.0/24" --vnet-name "cd-dockerhost-vnet" --vnet-subnet-address-prefix "10.2.0.0/24" --vnet-subnet-name "default" --public-ip-domain-name "cd-dockerhost"&amp;nbsp; --public-ip-name "cd-dockerhost-pip" --public-ip-allocationmethod "dynamic" --name "cd-dockerhost" --resource-group "cd-docker" --storage-account-name "cddockerstore" --location "westus" --os-type "Linux" --docker-cert-cn "cd-dockerhost.westus.cloudapp.azure.com"&lt;/font&gt;&lt;/p&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Here’s the run from within my bash terminal:&lt;a href="http://www.colinsalmcorner.com/posts/files/1307331b-df06-40fa-a28e-8861f282e19d.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/e5770c4a-f7b1-4d40-aae0-b807fa449e23.png" width="551" height="319"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s the result in the Portal:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/0c178c4b-f5d5-449e-a6e1-1e5636f5529f.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/4a1bd38f-c704-45ae-b152-a7ddae0e32c8.png" width="467" height="205"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the docker host is created, you’ll be able to log in using the certs that were created. To test it, run the following command:&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;docker -H $dockerhost --tls info&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/179e94fd-6868-4e0d-911c-5b6c39fd9e21.png"&gt;&lt;img title="SNAGHTML2b3ba0" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="SNAGHTML2b3ba0" src="http://www.colinsalmcorner.com/posts/files/e426e1bb-4e15-4d3a-bfa9-3be04d47aa63.png" width="494" height="208"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve included the commands in a &lt;a href="https://fishshell.com/" target="_blank"&gt;fish&lt;/a&gt; script &lt;a href="https://github.com/colindembovsky/vsts-selenium-docker-tests/blob/master/scripts/createDockerHost.fish" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The docker-compose.yml&lt;/h3&gt;
&lt;p&gt;The plan is to run multiple containers – one for the Selenium Grid hub and any number of containers for however many nodes we want to run tests in. We can call docker run for each container, or we can be smart and use docker-compose!&lt;/p&gt;
&lt;p&gt;Here’s the docker-compose.yml file:&lt;/p&gt;&lt;pre&gt;hub:
  image: selenium/hub
  ports:
    - "4444:4444"
  
chrome-node:
  image: selenium/node-chrome
  links:
    - hub

ff-node:
  image: selenium/node-firefox
  links:
    - hub

&lt;/pre&gt;Here we define three containers – named hub, chrome-node and ff-node. For each container we specify what image should be used (this is the image that is passed to a docker run command). For the hub, we map the container port 4444 to the host port 4444. This is the only port that needs to be accessible outside the docker host. The node containers don’t need to map ports since we’re never going to target them directly. To connect the nodes to the hub, we simple use the links keyword and specify the name(s) of the containers we want to link to – in this case, we’re linking both nodes to the hub container. Internally, the node containers will use this link to wire themselves up to the hub – we don’t need to do any of that plumbing ourselves - really elegant! 
&lt;h2&gt;The Release&lt;/h2&gt;
&lt;p&gt;The release requires us to run docker commands to start a Selenium hub and then as many nodes as we need. You can install &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscs-rm.docker" target="_blank"&gt;this extension&lt;/a&gt; from the marketplace to get docker tasks that you can use in build/release. Once the docker tasks get the containers running, we can run our tests, passing in the hub URL so that the Selenium tests hit the hub container, which will distribute the tests to the nodes based on the desired capabilities. Once the tests complete, we can optionally stop the containers.&lt;/p&gt;
&lt;h3&gt;Define the Docker Endpoint&lt;/h3&gt;
&lt;p&gt;In order to run commands against the docker host from within the release, we’ll need to configure a docker endpoint. Once you’ve installed the docker extension from the marketplace, navigate to your team project and click the gear icon and select Services. Then add a new Docker Host service, entering your certificates:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/7c1234cf-a831-4827-96fc-fda2f3fd8246.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/faad0481-94e6-4ee8-9703-2bed37159ae6.png" width="511" height="367"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Docker VSTS Agent&lt;/h3&gt;
&lt;p&gt;We’re almost ready to create the release – but you need an agent that has the docker client installed so that it can run docker commands! The easiest way to do this – is to run the vsts agent docker image on your docker host. Here’s the command:&lt;/p&gt;&lt;pre&gt;docker -H $dockerhost --tls run --env VSTS_ACCOUNT=$vstsAcc --env VSTS_TOKEN=$pat --env VSTS_POOL=docker -it microsoft/vsts-agent&lt;/pre&gt;
&lt;p&gt;I am connecting this agent to a queue called docker – so I had to create that queue in my VSTS project. I wanted a separate queue because I want to use the docker agent to run the docker commands and then use the hosted agent to run the tests – since the tests need to run on Windows. Of course I could have just created a Windows VM with the agent and the docker bits – that way I could run the release on the single agent.&lt;/p&gt;
&lt;h3&gt;The Release Definition&lt;/h3&gt;
&lt;p&gt;Create a new Release Definition and start from the empty template. Set the build to the build that contains your tests so that the tests become an artifact for the release. Conceptually, we want to spin up the Selenium containers for the test, run the tests and then (optionally) stop the containers. You also want to deploy your app, typically before you run your tests – I’ll skip the deployment steps for this post. You can do all three of these phases on a single agent – as long as the agent has docker (and docker-compose) installed and VS 2017 to run tests. Alternatively, you can do what I’m doing and create three separate phases – the docker commands run against a docker-enabled agent (the VSTS docker image that I we just got running) while the tests run off a Windows agent. Here’s what that looks like in a release:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/43793dbc-bffe-48c5-ba75-c9ba2cb74725.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/e32df3b8-00b6-4a57-898e-8afe7d417363.png" width="412" height="312"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the steps to get the release configured:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new Release Definition and rename the release by clicking the pencil icon next to the name 
&lt;li&gt;Rename “Environment 1” to “Test” or whatever you want to call the environment 
&lt;li&gt;Add a “Run on agent” phase (click the dropdown next to the “Add Tasks” button) 
&lt;li&gt;Set the queue for that phase to “docker” (or whatever queue you are using for your docker-enabled agents) 
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/413ccf0a-5a6a-4477-a81d-d807c3b0fc4d.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/9be0bed0-d4aa-49b5-8fa2-f85d988fcc6c.png" width="550" height="161"&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;li&gt;In this phase, add a “Docker-compose” task and configure it as follows: 
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/ee82ca0b-2d9a-480a-baef-e54639c71a77.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/2e0114be-d110-474b-b8d6-b3bb55e47db6.png" width="327" height="341"&gt;&lt;/a&gt; 
&lt;li&gt;Change the action to “Run service images” (this ends up calling &lt;font face="Courier New"&gt;docker-compose up&lt;/font&gt;) 
&lt;li&gt;Uncheck Build Images and check Run in Background 
&lt;li&gt;Set the Docker Host Connection&lt;/li&gt;&lt;/ol&gt;
&lt;li&gt;In the next phase, add tasks to deploy your app (I’m skipping these tasks for this post) 
&lt;li&gt;Add a VSTest task and configure it as follows: 
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/b37910bc-6cf2-42be-b0f3-a8f708432712.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/154ff891-cb9e-4dc6-8fc3-01d85fa3cd61.png" width="343" height="305"&gt;&lt;/a&gt; 
&lt;li&gt;I’m using V2 of the Test Agent task 
&lt;li&gt;I update the Test Assemblies filter to find any assembly with UITest in the name 
&lt;li&gt;I point the Settings File to the runsettings file 
&lt;li&gt;I override the values for the HubUrl and BaseUrl using environment variables 
&lt;li&gt;Click the ellipses button on the Test environment and configure the variables, using the name of your docker host for the HubUrl (note also how the port is the port from the docker-compose.yml file): 
&lt;li&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/85392ae0-41e8-46eb-ac18-aae5075780d6.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/6f263221-b3b4-4233-b0a3-da3bab7f6bd5.png" width="769" height="386"&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;li&gt;In the third (optional) phase, I use another Docker Compose task to run &lt;font face="Courier New"&gt;docker-compose down&lt;/font&gt; to shut down the containers 
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/bf70ea38-90fa-4904-91dd-bd81b9663ab7.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/b81be1bd-09a0-42ed-84f8-a43b95d3f6d9.png" width="364" height="301"&gt;&lt;/a&gt; 
&lt;li&gt;This time set the Action to “Run a Docker Compose command” and enter “down” for the Command 
&lt;li&gt;Again use the docker host connection&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;We can now queue and run the release!&lt;/p&gt;
&lt;p&gt;My release is successful and I can see the tests in the Tests tab (don’t forget to change the Outcome filter to Passed – the grid defaults this to Failed):&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/5ddee09a-106f-4bb6-8cf9-cef95d08a19f.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/302c3c26-3251-4c25-8922-cb9866bc3866.png" width="690" height="278"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Some Challenges&lt;/h2&gt;
&lt;h3&gt;Docker-compose SSL failures&lt;/h3&gt;
&lt;p&gt;I could not get the docker-compose task to work using the VSTS agent docker image. I kept getting certificate errors like this:&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;SSL error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:581)&lt;/font&gt; 
&lt;p&gt;I did &lt;a href="https://github.com/Microsoft/vsts-docker/issues/38" target="_blank"&gt;log an issue&lt;/a&gt; on the VSTS Docker Tasks repo, but I’m not sure if this is a bug in the extension or the VSTS docker agent. I was able to replicate this behavior locally by running docker-compose. What I found is that I can run docker-compose successfully if I explicitly pass in the ca.pem, cert.pem and key.pem files as command arguments – but if I specified them using environment variables, docker-compose failes with the SSL error. I was able to run docker commands successfully using the Docker tasks in the release – but that would mean running three commands (assuming I only want three containers) in the pre-test phase and another three in the post-test phase to stop each container. Here’s what that would look like: 
&lt;p&gt;&lt;a href="http://www.colinsalmcorner.com/posts/files/b55b6e90-9922-4986-b8bb-bbab1ae00767.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://www.colinsalmcorner.com/posts/files/c92d14c5-ff6c-46a3-af19-2d6ad0ade7e4.png" width="787" height="193"&gt;&lt;/a&gt; 
&lt;p&gt;You can use the following commands to run the containers and link them (manually doing what the docker-compose.yml file does):&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;run -d -P --name selenium-hub selenium/hub&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;run -d --link selenium-hub:hub selenium/node-chrome&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;run -d --link selenium-hub:hub selenium/node-firefox&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;To get the run for this post working, I just ran the docker-compose from my local machine (passing in the certs explicitly) and disabled the Docker Compose task in my release.&lt;/p&gt;
&lt;p&gt;EDIT (3/9/2017): I figured out the issue I was having: when I created the docker host I wasn’t specifying a CN for the certificates. The default is *, which was causing my SSL issues. When I configured the CN correctly using &lt;/p&gt;
&lt;p&gt;--docker-cert-cn” "cd-dockerhost.westus.cloudapp.azure.com", everything worked nicely.&lt;/p&gt;
&lt;h3&gt;Running Tests in the Hosted Agent&lt;/h3&gt;
&lt;p&gt;I also could not get the test task to run successfully using the hosted agent – but it did run successfully if I used a private windows agent. This is because at this time VS 2017 is not yet installed on the hosted agent. Running tests from the hosted agent will work just fine once VS 2017 is installed onto it.&lt;/p&gt;
&lt;h2&gt;Pros and Cons&lt;/h2&gt;
&lt;p&gt;This technique is quite elegant – but there are pros and cons.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get lots of Selenium nodes registered to a Selenium hub to enable lots of parallel testing (refer to my previous blog on how to &lt;a href="http://colinsalmcorner.com/post/parallel-testing-in-a-selenium-grid-with-vsts" target="_blank"&gt;run tests in parallel in a grid&lt;/a&gt;) 
&lt;li&gt;No config required – you can run tests on the nodes as-is&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only Chrome and Firefox tests supported, since there are only docker images for these browsers. Technically you could join any node you want to to the hub container if you wanted other browsers, but at that point you may as well configure the hub outside docker anyway.&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
&lt;p&gt;I really like how easy it is to get a Selenium grid up and running using Docker. This should make testing fast – especially if you’re running tests in parallel. Once again VSTS makes advanced pipelines easy to tame!&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>docker</category>
    <category>Release Management</category>
  </categories>
  <comments>
    <comment isAdmin="false" isApproved="true" id="97d7f2f1-4723-45da-ba59-561559de25bc">
      <author>Igor</author>
      <email>unrealdrake@gmail.com</email>
      <website></website>
      <ip>178.124.158.42</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</userAgent>
      <date>2017-03-09 15:18:49</date>
      <content>Hi, Colin  . &lt;br /&gt;&lt;br /&gt;I use you Check in policy (code review required) plugin (vsix) and recommend for my colleagues. &lt;br /&gt;Please, I need your help.&lt;br /&gt;Can&amp;#39;t find your email or skype, pls respond me on unrealdrake@gmail.com or coverdrake (skype)</content>
    </comment>
    <comment isAdmin="true" isApproved="true" id="8acc0a3e-b712-4735-8789-9717363b72e2">
      <author>Colin Dembovsky</author>
      <email>colindembovsky@gmail.com</email>
      <website>http://colinsalmcorner.com/</website>
      <ip>50.106.22.57</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.110 Safari/537.36</userAgent>
      <date>2017-03-28 05:41:37</date>
      <content>Hi Igor - please log issues at the Github repo: https://github.com/colindembovsky/ColinsALMCornerCheckinPolicies/issues</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="cf431e73-de6c-4d5b-9834-1dbcf93fe9a1">
      <author>Paulo</author>
      <email>pjorge.tv2016@gmail.com</email>
      <website></website>
      <ip>83.174.63.9</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36</userAgent>
      <date>2017-11-20 18:44:24</date>
      <content>Hi Colin,&lt;br /&gt;&lt;br /&gt;It&amp;#39;s possible to run this on a TFS ON Premises installation? Have you ever tried?&lt;br /&gt;&lt;br /&gt;I can see that the microsoft/vsts-agent image, as a On Premise option, but i cannot find a way to use it.</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="7b26eebf-c054-4fab-bfce-effdeb5ff2dc">
      <author>rosebk</author>
      <email>rosebk1989@gmail.com</email>
      <website>http://www.trainingbangalore.in/selenium-training-in-bangalore.html</website>
      <ip>122.165.167.39</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36</userAgent>
      <date>2017-12-21 06:57:32</date>
      <content>I have read your blog and I gathered some needful information from your blog. Keep update your blog. Awaiting for your next update.</content>
    </comment>
    <comment isAdmin="true" isApproved="true" id="23edd572-ae14-4c01-895b-780fc6a1c8e6">
      <author>Colin Dembovsky</author>
      <email>colindembovsky@gmail.com</email>
      <website>http://colinsalmcorner.com/</website>
      <ip>50.35.94.220</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.168 Safari/537.36</userAgent>
      <date>2018-02-15 04:28:41</date>
      <content>Hi @Paulo&lt;br /&gt;&lt;br /&gt;This should work with TFS - when you start the VSTS Agent container, just specify the URL to the TFS server instead of a VSTS account.</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="f5cadd85-de8a-43d7-91c9-bf100ed747aa">
      <author>vijay khnv</author>
      <email>vijaykhnv@gmail.com</email>
      <website></website>
      <ip>97.101.137.82</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36</userAgent>
      <date>2018-04-09 04:9:00</date>
      <content>Hi Colin,&lt;br /&gt;&lt;br /&gt;This is a nice article. I&amp;#39;ve a question Can the above approach be  implemented with internal infrastructure and not on Azure VMs. We&amp;#39;ve the plan to run the automated UI tests on local Windows Server VMs  as part of CI/CD pipe-line using VNext builds, however I&amp;#39;m thinking if I can still go ahead and spin-up docker images on windows server VMs on our local infrastructure.  We&amp;#39;re already leveraging the Microsoft&amp;#39;s Parallel Pipelines to achieve parallelization of tests in multiple Windows Server VMs, however Can we take this parallelization to next level by creating multiple docker images in a single Windows Server VM.&lt;br /&gt;Please let me know.&lt;br /&gt;&lt;br /&gt;Regards,&lt;br /&gt;Vijay</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="22fef80a-23b4-401d-b757-88b7ebdc6d78">
      <author>target coupons</author>
      <email>macybrown0414@gmail.com</email>
      <website>https://www.promoocodes.com/coupons/active-target-promo-codes/</website>
      <ip>45.118.167.109</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36</userAgent>
      <date>2018-07-16 11:24:47</date>
      <content>Get a lovely dress and trendy collection in the wide range.</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="8862a061-3716-4f56-aad1-462357534d70">
      <author>prasanna</author>
      <email>prashanth@cynixit.com</email>
      <website>https://onlineitguru.com/selenium-online-training-placement.html</website>
      <ip>183.82.222.53</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</userAgent>
      <date>2018-11-02 12:11:06</date>
      <content>Thanks for providing the information . The articles in your blog helped me a lot for improving the knowledge on the subject. Also check my small collection on this at selenium Online Training Hyderabad</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="0b4d4f49-78d3-4f2d-8b9f-ba4abebd3d02">
      <author>idigitalacademy</author>
      <email>idigitalacademy@gmail.com</email>
      <website>https://www.idigitalacademy.com/best-seo-training-in-bangalore/</website>
      <ip>106.51.26.101</ip>
      <userAgent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36</userAgent>
      <date>2019-04-11 11:21:15</date>
      <content>i digital acadmey is No.1 rated seo training in bangalore.&lt;br /&gt;We are specilzed in digital marketing crouse,javascript, and angularjs and also seo course in bangalore.&lt;br /&gt;For more information please visit:&lt;br /&gt;https://www.idigitalacademy.com/best-seo-training-in-bangalore/</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="f4ea77fd-da3b-4dce-80f9-f4b1e5b9d94b">
      <author>Brahmesh</author>
      <email>chinta.brahmesh@gmail.com</email>
      <website></website>
      <ip>98.231.149.36</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</userAgent>
      <date>2019-05-13 23:19:27</date>
      <content>Hi Colin,&lt;br /&gt;&lt;br /&gt;Thanks for this article and for the detailed information on Running Selenium Tests in Docker using VSTS Release Management.&lt;br /&gt;&lt;br /&gt;Instead of using Selenium Hub and Chrome and FF nodes, I would like to use VsTest for the test case distribution and my nodes for test execution. After test execution, I will be having Publish results task in my release definition to write the results back to Azure Test Plans. Do you have any idea on this, how can we do this?&lt;br /&gt;&lt;br /&gt;Also, I&amp;#39;m planning use Docker to create image for tests, push the image to ACR and then deploy the image to kubernetes cluster to execute my test cases and write the results back to Azure Test Plans.&lt;br /&gt;&lt;br /&gt;Infact, I was trying this, able to create docker image for my tests and when i&amp;#39;m running getting an error like chrome driver does not exist. But with the failed test cases, I went ahead and pushed the image into Azure Container Registry. Created the release definition with kubectl tasks but not able deploy to cluster.&lt;br /&gt;&lt;br /&gt;If possible, can you please help with this?&lt;br /&gt;&lt;br /&gt;Thanks in advance!!&lt;br /&gt;&lt;br /&gt;Regards,&lt;br /&gt;Brahmesh</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="6484c052-34b6-40ad-9f71-a88f2571326e">
      <author>Brahmesh</author>
      <email>chinta.brahmesh@gmail.com</email>
      <website></website>
      <ip>98.231.149.36</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</userAgent>
      <date>2019-05-13 23:19:27</date>
      <content>Hi Colin,&lt;br /&gt;&lt;br /&gt;Thanks for this article and for the detailed information on Running Selenium Tests in Docker using VSTS Release Management.&lt;br /&gt;&lt;br /&gt;Instead of using Selenium Hub and Chrome and FF nodes, I would like to use VsTest for the test case distribution and my nodes for test execution. After test execution, I will be having Publish results task in my release definition to write the results back to Azure Test Plans. Do you have any idea on this, how can we do this?&lt;br /&gt;&lt;br /&gt;Also, I&amp;#39;m planning use Docker to create image for tests, push the image to ACR and then deploy the image to kubernetes cluster to execute my test cases and write the results back to Azure Test Plans.&lt;br /&gt;&lt;br /&gt;Infact, I was trying this, able to create docker image for my tests and when i&amp;#39;m running getting an error like chrome driver does not exist. But with the failed test cases, I went ahead and pushed the image into Azure Container Registry. Created the release definition with kubectl tasks but not able deploy to cluster.&lt;br /&gt;&lt;br /&gt;If possible, can you please help with this?&lt;br /&gt;&lt;br /&gt;Thanks in advance!!&lt;br /&gt;&lt;br /&gt;Regards,&lt;br /&gt;Brahmesh</content>
    </comment>
    <comment isAdmin="false" isApproved="false" id="6bf4a88d-75b8-4583-b152-241ce0547fb5">
      <author>Zuan Education</author>
      <email>Chris15hemsworth@gmail.com</email>
      <website>https://www.zuaneducation.com/selenium-training-chennai</website>
      <ip>122.164.5.10</ip>
      <userAgent>Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/73.0.3683.86 Chrome/73.0.3683.86 Safari/537.36</userAgent>
      <date>2019-05-20 07:28:39</date>
      <content>The above article on &amp;quot;Running Selenium Tests in Docker using VSTS Release Management&amp;quot; seems to be more informative. This is more helpful for our &amp;lt;a href=&amp;quot;https://www.zuaneducation.com/selenium-training-chennai&amp;quot;&amp;gt;selenium training in chennai&amp;lt;/a&amp;gt; Thanks for sharing</content>
    </comment>
  </comments>
  <viewCount>0</viewCount>
</post>