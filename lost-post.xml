<?xml version="1.0" encoding="utf-8"?>
<post>
  <id>5ba11101-449f-4c5c-8c28-8e08baedf41f</id>
  <title>Custom Build Task: Include Merged Changesets (and Work Items) in Build Report</title>
  <slug>custom-build-task-include-merged-changesets-(and-work-items)-in-build-report</slug>
  <shortUrl>http://bit.ly/1fxXCLE</shortUrl>
  <author>Colin Dembovsky</author>
  <pubDate>2013-02-04 08:01:00</pubDate>
  <lastModified>2020-04-09 23:07:29</lastModified>
  <content>&lt;p&gt;&lt;strong&gt;Update 2013-07-24&lt;/strong&gt;: This activity is now part of &lt;a href="http://tfsbuildextensions.codeplex.com" target="_blank"&gt;Community TFS Build Extensions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I’ve said it before and I’ll say it again – TFS is more than just source control. It’s more than just Work Item Tracking. One of the defining capabilities of TFS is integration across the ALM landscape.&lt;/p&gt; &lt;p&gt;Currently, if you’re using TeamBuild, you can check code in and build – and the build report will associate the checkins (and their associated work items) with the build. This works great if you don’t have branching… however, if you want to see the changesets that were merged in the build report too, you’re stuck. The information is in TFS – it’s just not easy to surface.&lt;/p&gt; &lt;p&gt;For example, let’s say you have a DEV-MAIN-LIVE branching hierarchy. Presumably, you’ll work on DEV and do a bunch of checkins. When you do a DEV build, you get a report of all the changes (and work items) that you’ve been working on. So far so good. Now let’s say you have a LIVE build that you merge to once in a while and it’s the LIVE build that you push to the testers. No problem – merge from DEV to MAIN, and then again from MAIN to LIVE. Run the build. Now the tester checks the build report to see what’s “in the build” and they see… nothing. Oh wait, there’s some merge or something – but no work items. What gives?&lt;/p&gt; &lt;p&gt;The “problem” here is that TeamBuild won’t traverse the merges for the build report. So the only change that’s associated to the LIVE build is the merge from MAIN. Not too helpful.&lt;/p&gt; &lt;p&gt;But wait: there’s an API that you can use to get the merge sources and so you *could* go and generate your own report. And after years of working with TFS, everyone says you *can* do that in theory, but I haven’t seen anyone actually go and do it.&lt;/p&gt; &lt;p&gt;The other alternative is to customize the build template to do the heavy lifting for you, so that your LIVE build report shows the merges as well as the merge sources (and their work items).&lt;/p&gt; &lt;h2&gt;Custom Activity&lt;/h2&gt; &lt;p&gt;Unfortunately this is not a trivial customization to make. I had to cuddle up around Reflector and manually “re-code” some Activities from the Microsoft.TeamFoundation.Build.Workflow.Activities namespace (the ones I wanted to use are marked internal – sigh). I’m getting quite good at taking code like this:&lt;/p&gt;&lt;pre class="brush: csharp; ruler: true;"&gt;ParameterExpression expression;&lt;br&gt;ParameterExpression expression2;&lt;br&gt;ParameterExpression expression3;&lt;br&gt;DelegateInArgument&lt;Changeset&gt; changeset = new DelegateInArgument&lt;Changeset&gt;();&lt;br&gt;ForEach&lt;Changeset&gt; each = new ForEach&lt;Changeset&gt;();&lt;br&gt;each.Values = new InArgument&lt;IEnumerable&lt;Changeset&gt;&gt;(Expression.Lambda&lt;Func&lt;ActivityContext, IEnumerable&lt;Changeset&gt;&gt;&gt;(Expression.Call(Expression.Property(Expression.Constant(this, typeof(AssociateChangesets)), (MethodInfo) methodof(AssociateChangesets.get_Changesets)), (MethodInfo) methodof(InArgument&lt;IEnumerable&lt;Changeset&gt;&gt;.Get, InArgument&lt;IEnumerable&lt;Changeset&gt;&gt;), new Expression[] { expression = Expression.Parameter(typeof(ActivityContext), "env") }), new ParameterExpression[] { expression }));&lt;br&gt;ActivityAction&lt;Changeset&gt; action = new ActivityAction&lt;Changeset&gt;();&lt;br&gt;action.Argument = changeset;&lt;br&gt;Sequence sequence = new Sequence();&lt;br&gt;WriteBuildInformation&lt;AssociatedChangeset&gt; item = new WriteBuildInformation&lt;AssociatedChangeset&gt;();&lt;br&gt;item.ParentToBuildDetail = new InArgument&lt;bool&gt;(true);&lt;br&gt;item.Value = new InArgument&lt;AssociatedChangeset&gt;(Expression.Lambda&lt;Func&lt;ActivityContext, AssociatedChangeset&gt;&gt;(Expression.MemberInit(Expression.New((ConstructorInfo) methodof(AssociatedChangeset..ctor), new Expression[0]), new MemberBinding[] { Expression.Bind((MethodInfo) methodof(AssociatedChangeset.set_ChangesetId), Expression.Property(Expression.Call(Expression.Constant(changeset), (MethodInfo) methodof(DelegateInArgument&lt;Changeset&gt;.Get, DelegateInArgument&lt;Changeset&gt;), new Expression[] { expression2 = Expression.Parameter(typeof(ActivityContext), "env") }), (MethodInfo) methodof(Changeset.get_ChangesetId))), Expression.Bind((MethodInfo) methodof(AssociatedChangeset.set_ChangesetUri), Expression.Property(Expression.Call(Expression.Constant(changeset), (MethodInfo) methodof(DelegateInArgument&lt;Changeset&gt;.Get, DelegateInArgument&lt;Changeset&gt;), new Expression[] { expression2 }), (MethodInfo) methodof(Changeset.get_ArtifactUri))), Expression.Bind((MethodInfo) methodof(AssociatedChangeset.set_CheckedInBy), Expression.Property(Expression.Call(Expression.Constant(changeset), (MethodInfo) methodof(DelegateInArgument&lt;Changeset&gt;.Get, DelegateInArgument&lt;Changeset&gt;), new Expression[] { expression2 }), (MethodInfo) methodof(Changeset.get_OwnerDisplayName))), Expression.Bind((MethodInfo) methodof(AssociatedChangeset.set_Comment), Expression.Property(Expression.Call(Expression.Constant(changeset), (MethodInfo) methodof(DelegateInArgument&lt;Changeset&gt;.Get, DelegateInArgument&lt;Changeset&gt;), new Expression[] { expression2 }), (MethodInfo) methodof(Changeset.get_Comment))) }), new ParameterExpression[] { expression2 }));&lt;br&gt;sequence.Activities.Add(item);&lt;br&gt;WriteBuildMessage message = new WriteBuildMessage();&lt;br&gt;message.Importance = new InArgument&lt;BuildMessageImportance&gt;(BuildMessageImportance.Low);&lt;br&gt;message.Message = new InArgument&lt;string&gt;(Expression.Lambda&lt;Func&lt;ActivityContext, string&gt;&gt;(Expression.Call(null, (MethodInfo) methodof(ActivitiesResources.Format), new Expression[] { Expression.Constant("BuiltChangeset", typeof(string)), Expression.NewArrayInit(typeof(object), new Expression[] { Expression.Convert(Expression.Property(Expression.Call(Expression.Constant(changeset), (MethodInfo) methodof(DelegateInArgument&lt;Changeset&gt;.Get, DelegateInArgument&lt;Changeset&gt;), new Expression[] { expression3 = Expression.Parameter(typeof(ActivityContext), "env") }), (MethodInfo) methodof(Changeset.get_ChangesetId)), typeof(object)) }) }), new ParameterExpression[] { expression3 }));&lt;br&gt;sequence.Activities.Add(message);&lt;br&gt;action.Handler = sequence;&lt;br&gt;each.Body = action;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;and turning it into a Workflow Activity like this:&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh3.ggpht.com/-RT3phkfWNxM/UQ9ONzLUTPI/AAAAAAAAAj0/ZC1hJs43r-g/s1600-h/image3.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-sx4kSEhFBUU/UQ9OPWdKY2I/AAAAAAAAAj8/aKHWN_XfrxU/image_thumb1.png?imgmax=800" width="228" height="290"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Anyway, I’ve created an “AssociateMergedChangesetsAndWorkItems” activity that you can plop into your Default workflow that will give you the merged changes too. There’s a little bit of work to get the custom activity in, but it’s nothing you can’t handle!&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;1. Copy your existing Default Workflow&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Of course, by Default here I mean the workflow that you use to compile-and-test-and-associate-changesets-and-workitems. You may have already added some of your own customizations. No problem.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;First, create a copy of your Default workflow (if you want to keep the original around). The easiest way to do this is to create a new build definition, then go to the Process page and expand the “Show Details” section at the top. Click the “New” button:&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh5.ggpht.com/-POI356twlAo/UQ9OQVbYvZI/AAAAAAAAAkE/kR_chD9xd_o/s1600-h/image7.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh6.ggpht.com/-MxBjDyShVnM/UQ9ORuMcyKI/AAAAAAAAAkM/BOMW3ptfDQU/image_thumb3.png?imgmax=800" width="331" height="114"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now just select the “Copy” option and type a name for the new template. In this case I’m going from the DefaultTemplate11.1.xaml which comes out-the-box in TFS 2012).&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh4.ggpht.com/-DMsPNfu-Hk0/UQ9OTL1c06I/AAAAAAAAAkU/a6cDoih2OqU/s1600-h/image10.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh5.ggpht.com/-FX5lcWKZbx4/UQ9OURnksHI/AAAAAAAAAkc/-BCiKi090qc/image_thumb4.png?imgmax=800" width="241" height="244"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Click OK and TFS will create a new XAML for you.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Open Source Control Explorer and go to your BuildProcessTemplates folder. Make sure you refresh to see the new workflow.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;2. Import the Custom Assembly&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now check in ColinsALMCorner.CustomBuildTasks.dll (skip right to the bottom of this post for the attachment links) into a folder in Source Control – this folder is where any custom build assembly needs to be located. If you don’t have one, then I suggest you create it under the BuildProcessTemplates folder so that your workflows and custom activities exist together.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh5.ggpht.com/-itFCs2RaS1w/UQ9OVj0PbDI/AAAAAAAAAkk/2IMxg2PJa0I/s1600-h/image14.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh4.ggpht.com/-xAM1UQIa-8Y/UQ9OXMWw2GI/AAAAAAAAAks/m6RLn46kRr0/image_thumb6.png?imgmax=800" width="337" height="112"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now go to team explorer and go to the Builds pane. Click on the Action dropdown (see below) and select “Manage Build Controllers…”.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh4.ggpht.com/-Yb32dmZe2gA/UQ9OYD1creI/AAAAAAAAAk0/pmD4P9ruglk/s1600-h/image17.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh6.ggpht.com/-uRrVcYJfCvw/UQ9OZhlsYZI/AAAAAAAAAk8/YVIe5GP4b7U/image_thumb7.png?imgmax=800" width="224" height="142"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Select the Build Controller you want to run the builds through, and click “Properties…”. In the “Version control path to custom assemblies” section, select the folder you just imported the custom dll to. Click OK.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh4.ggpht.com/-Zrk0nZ8tJIE/UQ9OajZCNSI/AAAAAAAAAlE/cEY3p0RQNk8/s1600-h/image21.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh5.ggpht.com/-PNLPZ-TIG1U/UQ9OcGb9TwI/AAAAAAAAAlI/nHYuiZywnes/image_thumb9.png?imgmax=800" width="188" height="272"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;3. Create a Project for Customizing the Workflow&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;(If you’re using the DefaultTemplate and want to skip, you can download this project from the bottom of this post).&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now comes the painful part: in order to add custom activities in custom assemblies to workflows, you need to make the workflow part of a VS project.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;So – File-&gt;New Project and select “Class Library” and give it a suitable name (I chose MergeWorkflow). Make sure you place it in a source controlled folder!&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Delete the “Class1.cs” file (you won’t need it) and add a reference to ColinsALMCorner.CustomBuildTasks.dll (you can even make this reference the local path for the corresponding server path you used for your build controller!). Check this solution into TFS.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now go back to Source Control Explorer and branch the Merge workflow that you created in Step 1. You’re going to branch this into your newly imported project folder:&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh3.ggpht.com/-pZBCRRbEBfI/UQ9OdEe3cII/AAAAAAAAAlU/TGly6gteRNk/s1600-h/image25.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh4.ggpht.com/-gO5w2ZDWTI8/UQ9OeBOIlhI/AAAAAAAAAlc/H_v1VfWFKYI/image_thumb11.png?imgmax=800" width="361" height="175"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Click OK. Now go back to the solution explorer and click on your project (not the solution, the project). Enable “View All Files” and include the XAML file. Your solution should now look like this:&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh3.ggpht.com/-kO5muVWzc5E/UQ9OfTdKUbI/AAAAAAAAAlk/KuVsXnp7YjQ/s1600-h/image29.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-DHl13JF1PQw/UQ9OhH7_15I/AAAAAAAAAls/GfhW3Pur3XA/image_thumb13.png?imgmax=800" width="275" height="223"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;To get the project compiling, you’ll need to add a bunch of assemblies. These ones are from the GAC:&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;ul&gt;&lt;br&gt;&lt;br /&gt;&lt;li&gt;System.Activities &lt;br&gt;&lt;br /&gt;&lt;li&gt;System.Activities.Presentation &lt;br&gt;&lt;br /&gt;&lt;li&gt;PresentationFramework &lt;br&gt;&lt;br /&gt;&lt;li&gt;WindowsBase &lt;br&gt;&lt;br /&gt;&lt;li&gt;System.Xaml &lt;br&gt;&lt;br /&gt;&lt;li&gt;System.Drawing &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.Client &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.Common &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.Build.Client &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.Build.Workflow &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.VersionControl.Client &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.VersionControl.Common &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.WorkItemTracking.Client&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;These ones you’ll have to copy from a TFS server (if you don’t have it installed on your machine). Look in c:\Program Files\Microsoft Team Foundation Server 11.0\Tools as well as in the GAC folders (c:\windows\assembly\GAC_MSIL):&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;ul&gt;&lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.TestImpact.BuildIntegration &lt;br&gt;&lt;br /&gt;&lt;li&gt;Microsoft.TeamFoundation.TestImpact.Client&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;You should now be able to compile the solution. Double click the workflow to open the designer.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;4. Adding the Custom Activity&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now you can add in the custom activity. In the tabs at the bottom of the workflow designer, click on “Imports”. Then click the dropdown and add ColinsALMCorner.CustomBuildTasks to import it into the workflow.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh3.ggpht.com/-dd-6tP7R5Ds/UQ9OiPYXPjI/AAAAAAAAAl0/X_Jzwjq48i8/s1600-h/image33.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh6.ggpht.com/-6-xAZnOcNoY/UQ9OjQspPoI/AAAAAAAAAl8/gMnIAcik7h4/image_thumb15.png?imgmax=800" width="314" height="167"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Click on Arguments and create a new Argument (direction: In, type: Boolean) called “IncludeMerges”. Set the default value to True. You can also specify the MetaData for this argument to expose it in the Build Definition wizard later.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh6.ggpht.com/-AnQDK2drByo/UQ9Okv0cX5I/AAAAAAAAAmE/Sq5oC_kdbGE/s1600-h/image37.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-lFWu8OjVd48/UQ9OmArH3xI/AAAAAAAAAmM/4B-7SmXimXU/image_thumb17.png?imgmax=800" width="263" height="308"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Then click on Variables and add a variable called “associatedMergedChangesets” with Scope “Sequence” and type IList&lt;Changeset&gt;.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;You’ll need to add the custom activity to the Toolbox. To do this, select a section in the toolbox, right click and select “Choose Items”. In the browse dialog, browse to ColinsALMCorner.CustomBuildActivities and click OK. There are a bunch of activities available, but the only one you really need is “AssociateMergedChangesetsAndWorkItems”.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh4.ggpht.com/-LAme1DPBxlI/UQ9OntHSCaI/AAAAAAAAAmU/dlUBcMSr1-M/s1600-h/image41.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-p9ttxP6S-JI/UQ9Ope-GqvI/AAAAAAAAAmc/BK2csWUtI3s/image_thumb19.png?imgmax=800" width="347" height="256"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now scroll down to the If called “If AssociateChangesetsAndWorkItems” (this is the default one in the workflow). Drop an “AssociateMergedChangesetsAndWorkItems” (that’s the new custom activity) into the workflow just below the “AssociateChangesetsAndWorkItems” activity. Set the properties as follows:&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh4.ggpht.com/-ftosUu5WUyk/UQ9OqgRCr2I/AAAAAAAAAmk/bRnB1wiQ9t0/s1600-h/image45.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh6.ggpht.com/-E7cwkOw_nDw/UQ9OrySLOFI/AAAAAAAAAms/RRZRlvopbFM/image_thumb21.png?imgmax=800" width="357" height="228"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;ul&gt;&lt;br&gt;&lt;br /&gt;&lt;li&gt;AssociatedChangesets: set to associatedChangesets (this is the Result of the previous activity) &lt;br&gt;&lt;br /&gt;&lt;li&gt;AssociateMerges: set to IncludeMerges, the Argument you created earlier &lt;br&gt;&lt;br /&gt;&lt;li&gt;Result: set to associatedMergedChangesets, the Variable you created earlier &lt;br&gt;&lt;br /&gt;&lt;li&gt;UpdateWorkItems: set to True&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Make sure the project builds, and check in.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;5. Merge Back the Workflow&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Once you’ve checked in, find the workflow XAML file in your project in Source Control Explorer. Right click, and merge it back to the template in the BuildProcessTemplates folder. Don’t forget to check in the merge!&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;Create a Build and Run it!&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;You’re now ready to run the build. Either create a new build definition or simply change the template of an existing build from the Default template to your newly customized template. Then go checkin, merge and build. Voila!&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;So for an example, I have User Story 43, which has a child Task 44. I work on the DEV branch and check in against Task 44 (changeset 97). I then make another DEV change, no work item (changeset 98). I then merge to MAIN (merging changes 97 and 98) in changeset 99. I then merge from MAIN to LIVE in changeset 100.&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Now if you had this scenario and ran the “old” template, you’d get 1 associated changeset (100) and no associated work items. However, running your new flashy “merge-aware” template, you get 4 associated changesets and 2 associated work items (see the build output below). Much better!&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://lh6.ggpht.com/-xwoF0caZ1Pc/UQ9OuSTJn3I/AAAAAAAAAm0/ul1YT_4PSsI/s1600-h/image53.png"&gt;&lt;img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" border="0" alt="image" src="http://lh3.ggpht.com/-5h4mHbRZbZA/UQ9OwDI3ciI/AAAAAAAAAm8/beu4SeFzuSA/image_thumb25.png?imgmax=800" width="283" height="423"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;Gotchas to be aware of&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;This does mean that the work items may end up having been associated with 2 (or more) builds. Let’s say you have a DEV build (for CI). In the example above, Task 44 would have its “IntegratedIn” in set to the DEV build. Then you merge DEV to MAIN and MAIN to LIVE, and run the merge workflow on the LIVE branch. The workflow will update the “IntegratedIn” field of Task 44 to the LIVE build. You’ll still see both associations in the History, but the Task’s “IntegratedIn” field is now updated to the latest build (the LIVE build) – which may or may not be what you want. For me, it makes sense this way. Now the build report is a REAL change-log (not just a log of the merge changesets).&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Happy building!&lt;/p&gt;&lt;br&gt;&lt;br /&gt;&lt;h2&gt;P.S. Attachments&lt;/h2&gt;&lt;br&gt;&lt;br /&gt;&lt;p&gt;Here’s the link to the &lt;a href="http://sdrv.ms/VyiAuM" target="_blank"&gt;binaries on my skydrive&lt;/a&gt;. This zip file contains the dll (ColinsALMCorner.CustomBuildTasks) as well as the MergeWorkflow project. You can use this project to get started customizing your workflow. If you’re just using the default workflow without customizations, then you can use the workflow in this project instead of copying it etc. by checking the project into Source Control and then branching the template to the BuildProcessTemplates folder.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>teambuild</category>
  </categories>
  <comments>
    <comment isAdmin="false" isApproved="true" id="471c6981-42b8-4517-aae4-f35e65c54bf5">
      <author>Dan</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/16371190674769068713</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-02-04 20:24:08</date>
      <content>Thanks, this look awesome.  Currently what I've been doing is I have the Dev build change the work item's IntegratedIn field, and then when I would merge from Dev to Main I would have a query that finds all work items with an IntegratedIn field for Dev.Core.... and associate all of those work items with the Dev to Main merge checkin changeset; then I would do the same when merging from Main into Live.  This should simplify things and not require me to associate my merge changeset to 100+ work items all the time :) I'll give it a try once I get some space cycles.  Thanks!</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="679f13a9-4157-4e53-afe2-8f3391d801a1">
      <author>Colin Dembovsky</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/02577890234096457646</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-02-05 07:19:32</date>
      <content>Great Dan - please share your experiences here. I tested as well as I could (mostly using Fakes to fake out the TFS server) but I haven't tested in a "real world" scenario like yours...</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="5398c0a6-ea5c-4da5-9732-231575c9f64a">
      <author>Anonymous</author>
      <email>noreply@blogger.com</email>
      <website></website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-03-04 09:57:34</date>
      <content>thanks for share&lt;a href="http://www.justdetective.com/" title="徵信社" rel="nofollow"&gt;.&lt;/a&gt;</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="bf7b9f65-98ed-47bb-a356-7fc23d847832">
      <author>Anonymous</author>
      <email>noreply@blogger.com</email>
      <website></website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-05-15 08:5:18</date>
      <content>Hi Colin,&lt;br /&gt;&lt;br /&gt;This is really awesome blog and the assembly is really helpful. &lt;br /&gt;&lt;br /&gt;In the happy situation, this work fine and display all the merged changesets and associated workitems.&lt;br /&gt;&lt;br /&gt;Suppose any build fails or the test case fails during TFS 2012 Build i.e "Build_0010". Then we rectify that issue and again run that build (i.e. "Build_0011"), it displays only those associated changeset and workitems which are between Build_0010 and Build_0011.&lt;br /&gt;&lt;br /&gt;But it should display the changeset and associate workitems between last successfull build and current build.&lt;br /&gt;&lt;br /&gt;can you please share you source code so that we can modify and work on it? &lt;br /&gt;Or is there is any way to work with same activity to get the output?&lt;br /&gt;&lt;br /&gt;Please reply me on irfan[dot]shaikh[at]arrkgroup[dot]com&lt;br /&gt;&lt;br /&gt;Thanks&lt;br /&gt;Irfan Shaikh</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="109ee169-ec6e-482b-87a5-5417038f95d8">
      <author>Irfan Shaikh</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/12062999063275686568</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-05-17 17:41:02</date>
      <content>Hi &lt;br /&gt;&lt;br /&gt;This is really an awesome assembly and this really help us in our integration.&lt;br /&gt;&lt;br /&gt;I have one issue, I want to display list of changesets and associated workitems between 2 successful builds.&lt;br /&gt;&lt;br /&gt;I have branches structure given below:&lt;br /&gt;&lt;br /&gt;       ---------&gt; Main &lt;---------&lt;br /&gt;       ^                        |&lt;br /&gt;       |                        v&lt;br /&gt;  Developement               Release&lt;br /&gt;&lt;br /&gt;When we do a build and the testcases failed or build failed, we rectify those issue checkin and merged are done and again give the build that time it shows only those changesets and workitems which are associated after the failed build.&lt;br /&gt;&lt;br /&gt;Also, While merging I got this exception in the release&lt;br /&gt;&lt;br /&gt;Exception Message: An item with the same key has already been added. (type ArgumentException)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;Exception Stack Trace:    at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;   at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;   at ColinsALMCorner.CustomBuildTasks.UpdateWorkItem.Execute(CodeActivityContext context)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;   at System.Activities.CodeActivity`1.InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;   at System.Activities.ActivityInstance.Execute(ActivityExecutor executor, BookmarkManager bookmarkManager)&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;   at System.Activities.Runtime.ActivityExecutor.ExecuteActivityWorkItem.ExecuteBody(ActivityExecutor executor, BookmarkManager bookmarkManager, Location resultLocation)</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="860a3853-86b8-42a7-ba74-1fcfffce7613">
      <author>Colin Dembovsky</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/02577890234096457646</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-05-20 08:19:09</date>
      <content>I found a bug a while ago that causes this exception - I just haven't had time to re-release the binary. I've done so now - if you download it again, you'll no longer get this bug.</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="2bc988dd-01f3-4094-ae19-9659891cf258">
      <author>Colin Dembovsky</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/02577890234096457646</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-05-20 08:31:25</date>
      <content>Hi Irfan&lt;br /&gt;&lt;br /&gt;The code that I add simply looks up the merge parents for the change-sets that the out-of-the-box TFS build process picks up. Can you enable diagnostic logging on your build. Then open the Log, and look for 'Analyzing labels'. You'll see the labels that the build process is getting changes for. When I run builds that fail, I see this go back to the "last good build" by default. For example, build 1 succeeds, but build 2 and 3 fail. When build 4 runs (successfully) the log says, "Analyzing labels Build1 and Build4" and then lists the change-sets between these two labels.&lt;br /&gt;&lt;br /&gt;Also make sure that "Label Sources" is set to True in your build definition!&lt;br /&gt;&lt;br /&gt;I'm working on getting the code published as part of tfsbuildextensions.codeplex.com, so stay tuned!</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="68449dab-9ffe-4e7a-8eb0-769f660086fb">
      <author>C:/DunMiffSys</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/01036514935272795907</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-07-31 06:23:59</date>
      <content>Will this work with TFS 2010 - either building the project manually or using what you have posted?</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="95bf581b-d184-4285-bdab-18500daa4f37">
      <author>C:/DunMiffSys</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/01036514935272795907</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-08-13 05:5:46</date>
      <content>Is there a version available which targets the .net 4.0 framework? Or Sourcecode perhaps?</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="8db8e12d-50d0-4052-ae54-63f4ebb7a924">
      <author>Colin Dembovsky</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/02577890234096457646</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-08-13 07:3:27</date>
      <content>This activity is now part of the TFS Community Build Extensions (see the link at the top of the post). It's hosted on CodePlex, so you can get the source from there if you like. Why are you wanting to target .NET 4?</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="2421e5e9-be21-4837-961d-464c1771fe11">
      <author>C:/DunMiffSys</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/01036514935272795907</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-09-14 23:19:30</date>
      <content>I assumed that since it is targeting .NET 4.5 and that this was causing problems, however you're right, I shouldn't need to target .NET 4.0 to use this in VS/TFS 2010.&lt;br /&gt;&lt;br /&gt;I cannot seem to get the AssociateMergedChangesetsAndWorkItems type to load. I am getting the TF215097 error, which I am familiar with and I'm almost certain I have everything in order; I am able to get types from TfsBuildExtensions.Activities to load and run just fine, but not ColinsALMCorner.CustomBuildTasks. I see your MergeWorkflow project uses mostly 11.0 references, so my next step is to try to use those versions. &lt;br /&gt;&lt;br /&gt;My original problem was getting it to load in the toolbox. I resolved that, however now I'm getting TF215097. Here was my initial problem, maybe it is useful feedback for you: http://stackoverflow.com/questions/18200212/adding-colinsalmcorner-custombuildtasks-dll-to-toolbox-causes-could-not-load-fi</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="6b7abbcf-05db-4ed9-890f-072fc9df7aae">
      <author>C:/DunMiffSys</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/01036514935272795907</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-09-29 21:43:25</date>
      <content>Following the steps with TFS/VS 2012 give me 2 build errors after completing step 4: &lt;br /&gt;&lt;br /&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets(347,5): error XC1043: Extension 'Microsoft.Activities.Build.Validation.ValidationBuildExtension' threw an exception of type 'System.Activities.InvalidWorkflowException' :  'The following errors were encountered while processing the workflow tree:&lt;br /&gt;1&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets(347,5): error XC1043: 'VisualBasicReference': Compiler error(s) encountered processing expression "BuildDetail".&lt;br /&gt;1&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets(347,5): error XC1043: 'BuildDetail' is not declared. It may be inaccessible due to its protection level.&lt;br /&gt;1&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets(347,5): error XC1043: '.&lt;br /&gt;&lt;br /&gt;It was building fine until I added the AssociateMergeChangesetsAndWorkItems and set their properties. Any pointers for me?</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="9d521941-fe6b-42ea-9d08-ef5220c89e84">
      <author>Colin Dembovsky</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/02577890234096457646</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-09-29 21:58:23</date>
      <content>Did you get the Activity from the Community extensions binary (see the update at the top of the post)? Which version of TFS 2012 are you using (RTM, Update 1, 2, 3 or 4?)</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="b1f16810-ce0a-4430-b85b-b7dcc4b3cae7">
      <author>C:/DunMiffSys</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/01036514935272795907</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-09-30 00:4:02</date>
      <content>I see. I was using your 'Colins' assembly. Now I am using the TfsBuildExtensions.Activities.dll community extensions binary (for VS2012), after adding the namespace to the Imports, then dragging in the activity I now get 'Cannot create an instance of AssociateMergedChangesetsAndWorkItems'. (same error occurs dragging in the AssociateChangesets and AssociateWorkItems activities, but all other activities come in fine). &lt;br /&gt;&lt;br /&gt;I am using VS2012 Pro v 11.0.50727.1 RTM, no updates.&lt;br /&gt;&lt;br /&gt;Thanks for helping, I am getting closer, but could still use some guidance.                                                                                             </content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="921c77d2-9714-45b1-8d11-fa0b04fee01b">
      <author>C:/DunMiffSys</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/01036514935272795907</website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-10-06 04:45:04</date>
      <content>I am using RTM. When I use the latest community extensions binary, I Workflow Designer error: 'Cannot create instance of 'AssociatedMergedChangesetsAndWorkItems' 'Exception has been thrown by the target of an invocation'. This occurs also with the AssociateChangesets and AssociateWorkItems activities. It does NOT happen for the WitGetWorkItemsForArtifacts and GetMergedChangesets activities.</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="6f5b084f-474d-4ae3-82d3-7ecdeb3f04e5">
      <author>Anonymous</author>
      <email>noreply@blogger.com</email>
      <website></website>
      <ip></ip>
      <userAgent></userAgent>
      <date>2013-10-29 02:42:24</date>
      <content>Could you share what the bug was?  I'm seeing a similar error in a WF I inherited, and there's precious little information to be found on it.  The only possible cause I've turned up is related to sad:XamlDebuggerXmlReader.FileName on non-root elements.  If you're cause was anything else, I'd love to know what else to look for.  Thx!</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="579387b7-2887-4d21-ae40-fd447908114f">
      <author>Chris McElyea</author>
      <email>chrismcelyea@sunnuclear.com</email>
      <website>http://www.sunnuclear.com/</website>
      <ip>66.194.230.26</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36</userAgent>
      <date>2014-05-19 15:2:26</date>
      <content>Hi Colin,&lt;br /&gt;&lt;br /&gt;I have the need to have the build actually change the state of the work item and add the build number to a field under Implementation Information.  I can&amp;#39;t find a code example that shows how to accomplish this task.  Any guidance or code examples would be appreciated.</content>
    </comment>
    <comment isAdmin="true" isApproved="true" id="acd9c625-cd39-4346-b12c-e2605953e22d">
      <author>Colin Dembovsky</author>
      <email>colindembovsky@gmail.com</email>
      <website>http://colinsalmcorner.com/</website>
      <ip>105.224.147.200</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.3; Win64; x64; Trident/7.0; rv:11.0) like Gecko</userAgent>
      <date>2014-05-20 06:6:54</date>
      <content>Hey Chris&lt;br /&gt;&lt;br /&gt;This shouldn&amp;#39;t be too hard - all you need is the ID of the work item and a reference to the work item store. You can see an example here: http://msdn.microsoft.com/en-us/library/bb130323.aspx. In your case you&amp;#39;ll want to change the &amp;quot;State&amp;quot; and &amp;quot;Integrated In&amp;quot; fields before saving the work item. If you&amp;#39;re going to be changing a lot of work items, you may want to use BatchSave() instead of Save() on the work item store. Good luck!</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="5e79996c-0ca0-45e4-8048-33d3a68984e3">
      <author>Kevin McBrearty</author>
      <email>kmcbrearty@3ecompany.com</email>
      <website></website>
      <ip>4.30.168.146</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0</userAgent>
      <date>2014-06-12 18:37:55</date>
      <content>Colin,&lt;br /&gt;&lt;br /&gt;Any news on whether or not what is in the Community Extensions will work with TFS 2013 or if you have a possible alternative?  You indicated on the community extensions site that this wouldn&amp;#39;t work with the default template and we never had TFS 2012.  I tried to set this up in TFS 2013 but was unable to determine how to retrieve the AssociatedChangesets on the work flow item configuration since I don&amp;#39;t have the associatedChanges variable.</content>
    </comment>
    <comment isAdmin="true" isApproved="true" id="672afa5b-3748-4f5a-876e-56809291de35">
      <author>Colin Dembovsky</author>
      <email>colindembovsky@gmail.com</email>
      <website>http://www.colinsalmcorner.com/</website>
      <ip>105.226.39.169</ip>
      <userAgent>Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36</userAgent>
      <date>2014-08-26 18:33:00</date>
      <content>@Kevin&lt;br /&gt;&lt;br /&gt;You can get the associated changesets using GetEnvironmentVariable&amp;lt;T&amp;gt; - see my post here: http://www.colinsalmcorner.com/post/tfs-2013-default-build--the-getenvironmentvariablet-activity</content>
    </comment>
  </comments>
  <viewCount>10137</viewCount>
</post>