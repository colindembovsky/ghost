<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Don’t Just Fix It, Red-Green Refactor It!</title>
  <slug>dont-just-fix-it-red-green-refactor-it</slug>
  <shortUrl>http://bit.ly/1uqRRBf</shortUrl>
  <author></author>
  <pubDate>2014-12-11 13:04:30</pubDate>
  <lastModified>2015-07-21 12:09:42</lastModified>
  <content>&lt;p&gt;I’m back to doing some dev again – for a real-life, going-to-charge-for application! It’s great to be based from home again and to be on some very cutting edge dev. &lt;/p&gt; &lt;p&gt;I’m very comfortable with &lt;a href="http://www.asp.net/mvc"&gt;ASP.NET MVC&lt;/a&gt;, but this project is the first &lt;a href="http://nancyfx.org/"&gt;Nancy&lt;/a&gt; project I’ve worked on. We’re also using &lt;a href="http://www.visualstudio.com/en-us/get-started/share-your-code-in-git-vs.aspx"&gt;Git on VSO&lt;/a&gt; for source control and backlogs, &lt;a href="http://myget.org"&gt;MyGet&lt;/a&gt; to host internal &lt;a href="https://www.nuget.org/"&gt;NuGet&lt;/a&gt; packages, &lt;a href="https://octopusdeploy.com/"&gt;Octopus deploy&lt;/a&gt; for deployment, &lt;a href="http://www.hanselman.com/blog/OneOfMicrosoftsBestKeptSecretsPythonToolsForVisualStudioPTVS.aspx"&gt;Python&lt;/a&gt; (with various libs, of course!) for number crunching and &lt;a href="http://azure.microsoft.com"&gt;Azure&lt;/a&gt; to host VMs and websites (which are monitored with &lt;a href="http://msdn.microsoft.com/en-us/library/dn481095.aspx"&gt;AppInsights&lt;/a&gt;). All in all it’s starting to shape up to a very cool application – details to follow as we approach go-live (play mysterious music here)…&lt;/p&gt; &lt;h2&gt;Ho Hum Dev&lt;/h2&gt; &lt;p&gt;Ever get into a groove that’s almost too automatic? Ever been driving home and you arrive and think, “Wait a minute – how did I get here?”. You were thinking so intently on something else that you just drove “on automatic” without really paying attention to what you were doing.&lt;/p&gt; &lt;p&gt;Dev can sometimes get into this kind of groove. I was doing some coding a few days ago and almost missed a good quality improvement opportunity – fortunately, I was able to look up long enough to see a better way to do things, and hopefully save myself some pain down the line.&lt;/p&gt; &lt;p&gt;I was debugging some code, and something wasn’t working the way I expected. Here’s a code snippet showing two properties I was working with:&lt;/p&gt;&lt;pre class="brush: csharp;"&gt;protected string _name;
public string Name
{
    get 
    {
        if (string.IsNullOrEmpty(_name))
        {
            SplitKey();
        }
        return _name;
    }
    set 
    {
        _name = value;
        CombineKey();
    }
}

protected ComponentType _type;
public string Type
{
    get
    {
        return _type.ToString();
    }
    set
    {
        _type = ParseTypeEnum(value);
        CombineKey();
    }
}
&lt;/pre&gt;
&lt;p&gt;See how the getter for the Type property doesn’t match the code for the getter for Name? Even though I have unit tests for this getter, the tests are all passing!&lt;/p&gt;
&lt;p&gt;Now the simple thing to do would have been to simply add the missing call to SplitKey() and carry on – but I wanted to know why the tests weren’t failing. I knew there were issues with the code (I had hit them while debugging) so I decided to take a step back and try some good practices: namely red-green refactor.&lt;/p&gt;
&lt;h2&gt;Working with Quality in Mind&lt;/h2&gt;
&lt;p&gt;When you’re coding you should be working with quality in mind – that’s why I love unit testing so much. If you’re doing dev without unit testing, you’re only setting yourself up for long hours of painful in-production debugging. Not fun. Build with quality up front – while it may &lt;em&gt;feel&lt;/em&gt; like it’s taking longer to deliver, &lt;a href="http://colinsalmcorner.com/post/why-you-absolutely-need-to-unit-test"&gt;you’ll save time in the long run&lt;/a&gt; since you’ll be adding new features instead of debugging poor quality code.&lt;/p&gt;
&lt;p&gt;Here’s what you *should* be doing when you come across “hanky” code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do some coding 
&lt;li&gt;While running / debugging, find some bug 
&lt;li&gt;BEFORE FIXING THE BUG, write a FAILING unit test that exposes the bug 
&lt;li&gt;Refactor/fix till the test passes&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;So I opened up the tests for this entity and found the issue: I was only testing one scenario. This highlights that while code coverage is important, it can give you a false sense of security! 
&lt;p&gt;Here’s the original test:&lt;/p&gt;&lt;pre class="brush: csharp;"&gt;[TestMethod]
public void SetsPropertiesCorrectlyFromKeys()
{
    var component = new Component()
    {
        Key = "Logger_Log1"
    };

    Assert.AreEqual("Logger", component.Type);
    Assert.AreEqual("Log1", component.Name);
}
&lt;/pre&gt;
&lt;p&gt;ComponentType comes from an enumeration – and since Logger is the 1st value in the enum, it defaults to Logger if you don’t explicitly set the value. So while I had a test that was covering the entire method, it wasn’t testing all the combinations! 
&lt;p&gt;So I added a new test:&lt;/p&gt;&lt;pre class="brush: csharp;"&gt;[TestMethod]
public void SetsPropertiesCorrectlyFromKeys2()
{
    var component = new Component()
    {
        Key = "Service_S0"
    };

    Assert.AreEqual("Service", component.Type);
    Assert.AreEqual("S0", component.Name);
}
&lt;/pre&gt;
&lt;p&gt;Now when I ran the tests, the 2nd test failed. Excellent! Now I’ve got a further test that will check for a bad piece of code.&lt;/p&gt;
&lt;p&gt;To fix the bug, I had to add another enum value and of course, add in the missing SplitKey() call in the Type property getter:&lt;/p&gt;&lt;pre class="brush: csharp;"&gt;public enum ComponentType
{
    Unknown,
    Logger,
    Service
}

...

protected ComponentType _type;
public string Type
{
    get
    {
        if (_type == ComponentType.Unknown)
        {
            SplitKey();
        }
        return _type.ToString();
    }
    set
    {
        _type = ParseTypeEnum(value);
        CombineKey();
    }
}
&lt;/pre&gt;
&lt;p&gt;Now both tests are passing. Hooray!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I realize the red-green refactoring isn’t a new concept – but I wanted to show a real-life example of how you should be thinking about your dev and debugging. Even though the code itself had 100% code coverage, there were still bugs. But debugging with quality in mind means you can add tests that cover specific scenarios – and which will reduce the amount of buggy code going into production.&lt;/p&gt;
&lt;p&gt;Happy dev’ing!&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>development</category>
  </categories>
  <comments></comments>
  <viewCount>4982</viewCount>
  <id>f24edcc9-4b00-47a6-b097-5afbfb7e0f63</id>
</post>